# group files
macro(GroupFiles fileGroup)
    string(REPLACE "_" " " fileGroupName ${fileGroup})
    string(TOLOWER ${fileGroupName} fileGroupName)
    string(REGEX MATCHALL "([^ ]+)" fileGroupNameSplit ${fileGroupName})

    set(finalFileGroupName)
    foreach(fileGroupNameWord ${fileGroupNameSplit})
        string(SUBSTRING ${fileGroupNameWord} 0 1 firstLetter)
        string(SUBSTRING ${fileGroupNameWord} 1 -1 otherLetters)
        string(TOUPPER ${firstLetter} firstLetter)
        if(finalFileGroupName)
            set(finalFileGroupName "${finalFileGroupName} ")
        endif()
        set(finalFileGroupName "${finalFileGroupName}${firstLetter}${otherLetters}")
    endforeach()

    foreach(currentFile ${${fileGroup}})
        set(folder ${currentFile})
        get_filename_component(filename ${folder} NAME)
        string(REPLACE "${filename}" "" folder ${folder})
        set(groupName "${finalFileGroupName}")
        if(NOT folder STREQUAL "")
            string(REGEX REPLACE "/+$" "" baseFolder ${folder})
            string(REPLACE "/" "\\" baseFolder ${baseFolder})
            set(groupName "${groupName}\\${baseFolder}")
        endif()
        source_group("${groupName}" FILES ${currentFile})
    endforeach()
endmacro()


# From https://cheind.wordpress.com/2010/02/21/reducing-compilation-time-precompiled-header/
# Defined elsewhere: USE_PCH = bool, PCH_FILE = path to the header
function(EnablePrecompiledHeaders SOURCE_VARIABLE_NAME)
  if(MSVC AND ${USE_PCH})
    set(files ${${SOURCE_VARIABLE_NAME}})
     
    # Generate precompiled header translation unit
	set(pch_abs ${PCH_FILE})
    get_filename_component(pch_basename ${pch_abs} NAME_WE)
    set(pch_unity ${CMAKE_CURRENT_BINARY_DIR}/${pch_basename}.cpp)
    FILE(WRITE ${pch_unity} "// Precompiled header unity generated by CMake\n")
    FILE(APPEND ${pch_unity} "#include <${pch_abs}>\n")
    set_source_files_properties(${pch_unity}  PROPERTIES COMPILE_FLAGS "/Yc\"${pch_abs}\"")
     
    # Update properties of source files to use the precompiled header.
    # Additionally, force the inclusion of the precompiled header at beginning of each source file.
    foreach(source_file ${files} )
      set_source_files_properties(
        ${source_file} 
        PROPERTIES COMPILE_FLAGS
        "/Yu\"${pch_abs}\" /FI\"${pch_abs}\""
      )
    endforeach(source_file)
     
    # Finally, update the source file collection to contain the precompiled header translation unit
    set(${SOURCE_VARIABLE_NAME} ${pch_unity} ${${SOURCE_VARIABLE_NAME}} PARENT_SCOPE)
  endif(MSVC AND ${USE_PCH})
endfunction(EnablePrecompiledHeaders)